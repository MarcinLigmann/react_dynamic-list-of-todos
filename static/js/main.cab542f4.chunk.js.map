{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodo","setSelectedTodo","selectedModel","setSelectedModel","className","map","task","id","completed","classNames","title","type","value","onClick","handleSelectedClick","TodoFilter","query","setQuery","selectedFilter","setSelectedFilter","handleQueryChange","text","onChange","event","filter","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","selectedPerson","setSelectedPerson","loadingTodoInfo","setLoadingTodoInfo","useEffect","userId","finally","href","email","name","App","loadingTodos","setLoadingTodos","setTodos","todosToShow","tasks","wanted","selected","result","toLowerCase","includes","TodosToRender","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cab542f4.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[] | null;\n  selectedTodo: Todo | null;\n  setSelectedTodo: (task: Todo) => void;\n  selectedModel: boolean,\n  setSelectedModel: (item: boolean) => void;\n};\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos, selectedTodo, setSelectedTodo, selectedModel, setSelectedModel,\n  },\n) => {\n  const handleSelectedClick = (task: Todo) => {\n    setSelectedTodo(task);\n    setSelectedModel(!selectedModel);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n\n        {todos?.map(task => (\n          <tr key={task.id} data-cy=\"todo\" className=\"\">\n            <td className=\"is-vcentered\">{task.id}</td>\n            {task.completed\n              ? (\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              )\n              : (<td className=\"is-vcentered\" />)}\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': !task.completed,\n                'has-text-success': task.completed,\n              })}\n              >\n                {task.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                value={task.id}\n                onClick={() => handleSelectedClick(task)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={classNames('far', {\n                      'fa-eye-slash': selectedTodo?.id === task.id,\n                      'fa-eye': selectedTodo?.id !== task.id,\n                    })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport { Dispatch, SetStateAction } from 'react';\nimport { Filter } from '../../types/Filter';\n\ntype Props = {\n  query: string,\n  setQuery: (query: string) => void;\n  selectedFilter: string,\n  setSelectedFilter: Dispatch<SetStateAction<Filter>>\n};\n\nexport const TodoFilter = (\n  {\n    query, setQuery, selectedFilter, setSelectedFilter,\n  }: Props,\n) => {\n  const handleQueryChange = (text: string) => {\n    setQuery(text);\n  };\n\n  const handleSelectChange = (filter: Filter) => {\n    setSelectedFilter(filter);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedFilter}\n            onChange={(event) => handleSelectChange(\n              event.target.value as Filter,\n            )}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => handleQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleQueryChange('')}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo;\n  setSelectedModel: (info: boolean) => void;\n  setSelectedTodo: (arg: null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = (\n  { selectedTodo, setSelectedModel, setSelectedTodo },\n) => {\n  const [selectedPerson, setSelectedPerson] = useState<User | null>(null);\n  const [loadingTodoInfo, setLoadingTodoInfo] = useState<boolean>(false);\n\n  useEffect(() => {\n    setLoadingTodoInfo(true);\n    getUser(selectedTodo.userId)\n      .then(setSelectedPerson)\n      .finally(() => setLoadingTodoInfo(false));\n  }, [selectedTodo]);\n\n  const handleCloseClick = () => {\n    setSelectedModel(false);\n    setSelectedPerson(null);\n    setSelectedTodo(null);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loadingTodoInfo ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseClick}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              <a href={`mailto:${selectedPerson?.email}`}>\n                {selectedPerson?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Filter } from './types/Filter';\n\nexport const App: React.FC = () => {\n  const [loadingTodos, setLoadingTodos] = useState<boolean>(false);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  // const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState<string>('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedModel, setSelectedModel] = useState(false);\n  const [selectedFilter, setSelectedFilter] = useState<Filter>('all');\n\n  useEffect(() => {\n    setLoadingTodos(true);\n    getTodos()\n      .then(setTodos)\n      .finally(() => setLoadingTodos(false));\n  }, []);\n\n  function TodosToRender(tasks: Todo[], wanted: string, selected: Filter) {\n    let result;\n\n    switch (selected) {\n      case 'active':\n        result = tasks.filter(task => !task.completed);\n        break;\n      case 'completed':\n        result = tasks.filter(task => task.completed);\n        break;\n      default:\n        result = tasks;\n        break;\n    }\n\n    result = result.filter(task => task.title.toLowerCase().includes(wanted.toLowerCase()));\n\n    return result;\n  }\n\n  // useEffect(() => {\n  //   setVisibleTodos(TodosToRender(todos, query, selectedFilter));\n  // }, [query, selectedFilter, todos]);\n  const todosToShow = TodosToRender(todos, query, selectedFilter);\n\n  // console.log(query.length, todosToShow.length);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                selectedFilter={selectedFilter}\n                setSelectedFilter={setSelectedFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loadingTodos\n                && <Loader />}\n              <TodoList\n                todos={todosToShow}\n                selectedTodo={selectedTodo}\n                setSelectedTodo={setSelectedTodo}\n                selectedModel={selectedModel}\n                setSelectedModel={setSelectedModel}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && selectedModel\n        && (\n          <TodoModal\n            selectedTodo={selectedTodo}\n            setSelectedModel={setSelectedModel}\n            setSelectedTodo={setSelectedTodo}\n          />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}